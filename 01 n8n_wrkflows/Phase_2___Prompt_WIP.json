{
  "name": "Phase 2 | Prompt WIP",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        920,
        420
      ],
      "id": "ea9de789-0ed7-4c0a-aa39-f596383fa4bc",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        6920,
        860
      ],
      "id": "9caa5e37-47b4-4dba-a3c6-ceca7b482ae0",
      "name": "Merge",
      "executeOnce": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        10320,
        600
      ],
      "id": "9c4afd9f-dd8a-40d7-b65d-77b360ef2335",
      "name": "Merge1",
      "executeOnce": false
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "=1T91zUgsNMv1tD3B5XMzz9zo8JuYs6D3q4IySSR6UhuY",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "=229555237",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1540,
        620
      ],
      "id": "27642921-0a85-4fa1-87f3-04e541a6fcf4",
      "name": "Gets image from sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Dd3w6Uil0Iw63fMM",
          "name": "Google Sheets Sriwork"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1T91zUgsNMv1tD3B5XMzz9zo8JuYs6D3q4IySSR6UhuY",
          "mode": "list",
          "cachedResultName": "INTERNAL  | Titan Taneria",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1T91zUgsNMv1tD3B5XMzz9zo8JuYs6D3q4IySSR6UhuY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 229555237,
          "mode": "list",
          "cachedResultName": "FSN_GEN",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1T91zUgsNMv1tD3B5XMzz9zo8JuYs6D3q4IySSR6UhuY/edit#gid=229555237"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Gen-col": "={{ $json['Gen-col'][0] }}",
            "Prompt 1": "={{ $json.prompt[0] }}",
            "Prompt 2": "={{ $json.prompt[1] }}",
            "Prompt 3": "={{ $json.prompt[2] }}"
          },
          "matchingColumns": [
            "Gen-col"
          ],
          "schema": [
            {
              "id": "Gen-col",
              "displayName": "Gen-col",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Prompt 1",
              "displayName": "Prompt 1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Prompt 2",
              "displayName": "Prompt 2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Prompt 3",
              "displayName": "Prompt 3",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "cellFormat": "USER_ENTERED"
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        11160,
        620
      ],
      "id": "06957b89-9940-4301-bb19-2bd21cd9dc82",
      "name": "Adds Prompt to sheets",
      "executeOnce": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Dd3w6Uil0Iw63fMM",
          "name": "Google Sheets Sriwork"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2820,
        600
      ],
      "id": "33a0606c-6c84-49c4-a95a-930a368f35cd",
      "name": "Loop Over Items1",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "row_number, Link, id,, Prompt 1,, Gen-col",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1780,
        620
      ],
      "id": "1377e229-390a-4724-8e7b-412bc80cba42",
      "name": "Split Out"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate an fashion photography prompt for this outfit:\n\n**Outfit:** \"{{ $json.output.Outfit }}\"\n\n**Footwear:** \"{{ $json.output.Selected_Footwear }}\"\n\n**Accessories:** \"{{ $json.output.Accessories }}\"\n\nPlease create a sophisticated 150-200 word prompt following the Fashion Flux style guidelines.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# INDIAN ETHNIC FASHION PHOTOGRAPHY SYSTEM - BRAND-ALIGNED INSTRUCTIONS\n\n## OVERVIEW\nYou are an expert fashion photography prompt generator specializing in Indian ethnic wear that combines approachable, relatable aesthetics with intelligent theme selection and environmental storytelling. Transform text descriptions of ethnic outfits into warm, aspirational fashion photography prompts suitable for modern Indian fashion brands.\n\n## CORE COMPETENCIES\n\n### FASHION KNOWLEDGE BASE\n- Comprehensive knowledge of Indian ethnic wear: sarees, kurtas, anarkalis, lehengas, salwar suits\n- Fluent in Indian fashion terminology: silhouettes, textiles (cotton, silk, chiffon), traditional embellishments\n- Recognition of Indian aesthetic elements and cultural fashion influences\n- Understanding of contemporary Indian fashion photography styles\n\n### VISUAL LANGUAGE MASTERY\n- Translate ethnic fashion concepts into relatable visual descriptions\n- Articulate natural lighting setups with subtle shadows\n- Command color theory emphasizing outfit visibility against neutral backgrounds\n- Express warmth and approachability through detailed sensory language\n\n### THEME INTELLIGENCE\n- Auto-select appropriate Indian lifestyle themes based on outfit analysis\n- Generate authentic Indian environmental contexts with architectural details\n- Create relaxed, candid compositions with natural interactions\n\n## INPUT PROCESSING PROTOCOL\n\n### EXTRACT FROM TEXT INPUT:\n**OUTFIT DETAILS:**\n- Garment type (kurta, anarkali, saree, lehenga, salwar suit)\n- Colors, patterns, and fabric textures\n- Length and traditional cuts\n- Neckline styles common in ethnic wear\n- Sleeve variations\n- Traditional design details (embroidery, prints, borders, embellishments)\n\n**FOOTWEAR & ACCESSORIES:**\n- Traditional footwear (juttis, kolhapuris, sandals)\n- Jewelry (ethnic earrings, traditional necklaces, bangles)\n- Dupattas and additional ethnic accessories\n\n## BRAND-SPECIFIC THEME SELECTION LOGIC\n\n**ANALYZE STYLING DETAILS IN PRIORITY ORDER:**\n1. **Color vibrancy & visual weight** (bright/bold vs soft/muted)\n2. **Fabric flow & movement** (structured vs flowing)\n3. **Styling elements** (casual vs dressed up)\n4. **Time of day suggestion** (morning fresh vs evening elegant)\n5. **Activity context** (static elegance vs movement-friendly)\n\n### THEME OPTIONS WITH INDIAN BACKGROUNDS:\n\n**HERITAGE HOME**\n- *Indicators:* Structured silhouettes, deeper jewel tones, heavier fabrics, traditional motifs, formal ethnic pieces\n- *Backgrounds:* Indian tiled flooring, architectural columns with arches, traditional courtyards, white/grey walls\n- *Lighting:* Natural sunlight with soft shadows, window light\n- *Mood:* Comfortable elegance, approachable sophistication\n\n**MODERN INDIAN ALLEY**\n- *Indicators:* Mid-weight fabrics, contemporary color blocks, everyday kurtas with modern cuts, casual ethnic coordinates\n- *Backgrounds:* Indian streets with premium windows, white bougainvillea, clean architectural elements\n- *Lighting:* Natural daylight, subtle environmental shadows\n- *Mood:* Urban ethnic, relatable luxury\n\n**RESORT ELEGANCE**\n- *Indicators:* Light, airy fabrics (chiffons, georgettes), pastel or bright tropical colors, relaxed silhouettes, vacation-friendly styles\n- *Backgrounds:* Resort settings with Indian elements, terracotta floors, earthy walls, manicured spaces\n- *Lighting:* Soft resort ambiance, golden hour warmth\n- *Mood:* Relaxed refinement, vacation comfort\n\n**INDOOR SOPHISTICATION**\n- *Indicators:* Evening-appropriate colors (deep oranges, maroons, navy), silk-like textures, embellished pieces, sarees\n- *Backgrounds:* Dark wood furniture, golden curtains, subtle patterned carpets, Indian interiors\n- *Lighting:* Warm interior lighting, window-filtered light\n- *Mood:* Festive warmth, traditional grace\n\n**CONTEMPORARY FUSION**\n- *Indicators:* Solid colors or geometric prints, minimal embellishments, Western-influenced cuts with ethnic elements, coord sets\n- *Backgrounds:* Clean modern spaces with Indian accents, glass doors, premium finishes\n- *Lighting:* Bright, clean lighting emphasizing outfit details\n- *Mood:* Modern Indian woman, effortless style\n\n## SHOT TYPE VARIATIONS\n\n### BRAND-PREFERRED SHOT TYPES:\n- **Full-body shot:** Shows complete ethnic outfit with natural stance\n- **Three-quarter shot:** Emphasizes outfit flow and movement\n- **Walking shot:** Natural movement showcasing fabric drape\n- **Sitting shot:** Relaxed poses on furniture or steps\n- **Environmental interaction:** Model naturally engaging with surroundings\n\n## BRAND-SPECIFIC FASHION ELEMENTS\n\n### COMPLETE STYLING VISION:\n**HAIR:** Approachable styles (open waves, ponytails, relaxed buns - never too styled)\n**MAKEUP:** Minimal but polished (natural glow, soft lip color, defined eyes)\n**EXPRESSION:** Happy, soft, and warm (genuine smiles, no poker faces)\n**BODY LANGUAGE:** Relaxed, confident, and natural movement\n\n### MODEL CHARACTERISTICS:\n- Approachable Indian faces reflecting target audience\n- Warm, relatable expressions\n- Natural, confident posture\n- Authentic interaction with environment\n\n## EDITORIAL PROMPT STRUCTURE\n\n### NATURAL PARAGRAPH FORMAT (150-200 words)\nGenerate a flowing prompt that organically integrates:\n\n**OPENING:** Shot type and lifestyle concept\n**SUBJECT:** Relatable model description with natural styling\n**GARMENTS:** Detailed ethnic outfit woven into daily life context\n**ENVIRONMENT:** Authentic Indian settings that enhance relatability\n**MOOD & MOVEMENT:** Natural gestures and candid moments\n**TECHNICAL:** Bright, natural lighting approach\n**AESTHETIC:** Contemporary Indian lifestyle references\n\n### STYLE BALANCE\n- Blend **aspirational quality** with **everyday relatability**\n- Create **premium imagery** with **approachable elements**\n- Combine **ethnic tradition** with **modern lifestyle**\n- Mix **polished presentation** with **candid moments**\n\n### POSE PHILOSOPHY\nSuggest natural activities and movements:\n- **Everyday actions** (walking through doorways, adjusting dupatta, sitting casually)\n- **Candid moments** (looking away naturally, mid-conversation gestures)\n- **Environmental engagement** (touching walls, holding railings, interacting with space)\n- **Effortless positions** that show outfit naturally\n\n## OUTPUT EXAMPLES\n\n### VARIED OPENING STRUCTURES:\n- \"Full-body shot capturing a modern Indian woman in her heritage home...\"\n- \"Three-quarter frame showcasing effortless ethnic style in a resort setting...\"\n- \"Natural walking shot through a contemporary Indian alley...\"\n- \"Candid moment of relaxed sophistication in traditional interiors...\"\n\n### NATURAL LANGUAGE FLOW:\nCreate prompts that feel like lifestyle moments rather than posed fashion shots, while maintaining professional quality and the 150-200 word count.\n\n## QUALITY STANDARDS\n\n### BRAND AUTHENTICITY\n- Ensure approachable, non-intimidating imagery\n- Maintain focus on outfit visibility against clean backgrounds\n- Create cohesive Indian lifestyle narratives\n- Develop warm, inviting mood throughout\n\n### CREATIVE GUIDELINES\n- Avoid overly editorial or high-fashion language\n- Use relatable, everyday scenarios\n- Emphasize comfort and wearability\n- Maintain cultural authenticity without stereotypes\n\n### TECHNICAL PRECISION\n- Specify natural lighting with soft shadows\n- Suggest slightly blurred backgrounds for outfit focus\n- Include Indian architectural and design elements\n- Maintain bright, clean aesthetic for product visibility\n\n## PROCESS FLOW\n1. **Analyze input** for ethnic outfit details and occasion\n2. **Select theme** based on outfit style and wearability context\n3. **Choose shot type** that naturally showcases the garment\n4. **Develop mood** with approachable styling and expressions\n5. **Craft prompt** with lifestyle narrative and natural flow\n6. **Ensure 150-200 words** while maintaining engaging, relatable narrative"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        8740,
        -420
      ],
      "id": "ed9a0b12-2955-4fd4-966a-626093c2c441",
      "name": "Prompt Generator",
      "executeOnce": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        11920,
        1260
      ],
      "id": "486ad75a-e96e-444f-90b1-6ba9b92fc864",
      "name": "Wait",
      "webhookId": "a5b65f6e-0a72-4f11-82e7-1f4bf23d9556"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "9957d62a-807c-4356-ab16-5dea547ffb47",
              "leftValue": "={{ $json['Prompt 1'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2180,
        620
      ],
      "id": "9a60a472-3cfc-48af-b9be-67aefe32df5f",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2380,
        760
      ],
      "id": "8e7239f2-e7a9-45de-802a-c2963e1ce71b",
      "name": "No Operation, do nothing1",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# n8n Workflow: AI-Powered Fashion Prompt Generator\n\n## Overview\n\nThis n8n workflow automates the process of generating AI prompts for fashion/clothing images stored in Google Drive. The workflow reads product data from Google Sheets, downloads associated images, and uses Google's Gemini AI model to create descriptive prompts that can be used for various fashion-related applications.\n\n## Workflow Purpose\n\nThe primary goal is to automatically generate multiple creative prompts for fashion items based on their images. This is particularly useful for:\n- E-commerce product descriptions\n- AI image generation training data\n- Fashion catalog automation\n- Content creation for fashion brands\n\n## Key Components\n\n### Data Sources\n- **Google Sheets**: Contains product information including:\n  - Product details (Brand, Gender, Brick category)\n  - Google Drive image links\n  - Generated prompts storage\n- **Google Drive**: Stores the actual product images\n\n### AI Processing\n- **Google Gemini 2.5 Flash**: AI model for prompt generation\n- **Structured Output Parser**: Ensures consistent prompt formatting\n- **Temperature Setting**: 0.7 for balanced creativity and consistency\n\n## Workflow Steps\n\n### 1. Data Retrieval\n- **Trigger**: Manual workflow start\n- **Sheet Reading**: Fetches product data from \"FSN\" sheet\n- **Field Extraction**: Extracts `row_number`, `Link`, `id`, and existing `Prompt 1`\n\n### 2. Conditional Processing\n- **Empty Check**: Only processes items where `Prompt 1` is empty\n- **Skip Logic**: Avoids re-processing items that already have prompts\n\n### 3. Batch Processing\n- **Loop Structure**: Processes items in batches to manage API limits\n- **Image Download**: Downloads images from Google Drive using extracted IDs\n- **System Instructions**: Retrieves AI prompting guidelines from dedicated sheet\n\n### 4. AI Prompt Generation\n- **Data Preparation**: Merges image data with system instructions\n- **Duplication**: Creates 3 copies of each item for prompt variation\n- **AI Processing**: Uses Gemini model to generate creative prompts\n- **Aggregation**: Collects all generated prompts for each item\n\n### 5. Data Storage\n- **Sheet Update**: Writes generated prompts back to Google Sheets\n- **Column Mapping**: Updates `Prompt 1`, `Prompt 2`, and `Prompt 3` columns\n- **Rate Limiting**: 30-second wait between batches to respect API limits\n\n## Technical Features\n\n### Error Handling\n- Conditional logic prevents processing items that already have prompts\n- Batch processing prevents overwhelming API endpoints\n\n### Scalability\n- Loop structure allows processing large datasets\n- Configurable batch sizes and delays\n- Disabled limit node can be enabled for testing\n\n### Data Integrity\n- Row number matching ensures accurate updates\n- Multiple prompt generation provides variety\n- Structured output ensures consistent formatting\n\n\n\n\n",
        "height": 1820,
        "width": 2860,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        300,
        -200
      ],
      "id": "5905666e-7949-40b1-a77b-4bf909341c07",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1MGbnhByVIjFDIucBTo-87OPtAjpPHC6SHqkNwy9kXDY",
          "mode": "list",
          "cachedResultName": "Internal | Ajio Buda 5",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1MGbnhByVIjFDIucBTo-87OPtAjpPHC6SHqkNwy9kXDY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "FSN",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1MGbnhByVIjFDIucBTo-87OPtAjpPHC6SHqkNwy9kXDY/edit#gid=0"
        },
        "options": {
          "columnsToWatch": [
            "Link"
          ]
        }
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        920,
        620
      ],
      "id": "920d59c5-8ad5-4f2e-af7f-397e6aec6f34",
      "name": "Google Sheets Trigger",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "prompt": "=Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        9300,
        40
      ],
      "id": "5cdd061b-4ddc-45ae-98fd-6fabe5981386",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7a4f7c5e-fd73-4d86-8ff9-0269fbc8a4b5",
              "name": "output.Outfit",
              "value": "={{ $json.output.Outfit }}",
              "type": "string"
            },
            {
              "id": "7b7c7885-08a1-4d27-9bb2-715cdd4d923f",
              "name": "output.Accessories",
              "value": "={{ $json.output.Accessories }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5160,
        840
      ],
      "id": "ee24e1eb-8cc3-4586-9200-1e5ddb6f4044",
      "name": "Edit Fields",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c1c8f66b-d090-42b7-ab02-508587d48f24",
              "name": "output.Selected_Footwear",
              "value": "={{ $json.output.Selected_Footwear }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6720,
        880
      ],
      "id": "4fb462d4-e01e-4be4-ac44-25fbccc669e8",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4220,
        1120
      ],
      "id": "087f656d-8f7f-490d-bf31-dd3592cb41c5",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "UpLQ2CLSMB2oJQnX",
          "name": "Sri"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"Outfit\": \"\",\n\t\"Accessories\": \"\"\n}\n\n\n\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        4400,
        1180
      ],
      "id": "882405bd-3000-481f-a7c3-92054d718f9b",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "options": {
          "prompt": "Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        4360,
        1020
      ],
      "id": "df1c1c7d-ec82-4d9a-9538-911f58dd25af",
      "name": "Auto-fixing Output Parser1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-05-20",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4800,
        1140
      ],
      "id": "f6f624b8-ab76-4a68-8b5d-1eb892d92c20",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "UpLQ2CLSMB2oJQnX",
          "name": "Sri"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Please analyze this image and extract only the clothing and accessory details according to the instructions provided. Focus on describing the garments' style, colors, patterns, textures, fit, and any distinctive features. Also include all accessories worn by the model. Remember to ignore the background, pose, lighting, and footwear.\n\nyou must use http node to view the image",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Step 1: Clothing Extraction Instructions\n\n## Your Task\nAnalyze clothing in images and extract only the essential garment details needed for fashion photography prompts.\n\n## What to Extract FROM INPUT IMAGE\n\n### Garment Types and Details\n- Identify each piece of clothing (shirt, dress, pants, jacket, etc.)\n- Note specific garment style (button-up, polo, midi dress, skinny jeans, blazer, etc.)\n- Record garment construction details (pleated, fitted, oversized, cropped, etc.)\n\n### Colors, Patterns, and Textures\n- **Colors:** Primary and accent colors, color combinations\n- **Patterns:** Floral, striped, plaid, geometric, solid, etc.\n- **Textures:** Cotton, denim, silk, knit, leather, lace, etc.\n- **Finishes:** Matte, glossy, distressed, washed, etc.\n\n### Specific Garment Features\n- **Necklines:** V-neck, crew neck, scoop neck, off-shoulder, etc.\n- **Sleeves:** Long, short, sleeveless, puffed, bell, rolled, etc.\n- **Length:** Cropped, regular, long, midi, maxi, mini, etc.\n- **Fit:** Fitted, loose, oversized, tailored, relaxed, etc.\n- **Details:** Buttons, zippers, pockets, belts, tucks, etc.\n\n### Accessories Worn by Model\n- Jewelry (necklaces, earrings, bracelets, rings)\n- Bags or purses\n- Belts\n- Hats or headwear\n- Scarves\n- Sunglasses\n- Watches\n\n## What to COMPLETELY IGNORE\n\n### Visual Elements to Skip\n- Background settings or environments\n- Model's pose or body position\n- Model's facial expression or appearance\n- Lighting conditions or mood\n- Camera angles or composition\n- Any people in the background\n\n### Footwear Exception\n- **DO NOT extract footwear from the input image**\n- Footwear will be selected separately based on outfit compatibility\n- Ignore any shoes, boots, sandals, or barefoot styling in the source image\n\n## Output Format\n\nProvide your analysis in the following structured format:\n\n**Outfit:** \"[Complete detailed description of all clothing items with materials, colors, patterns, fit, and styling details]\"\n\n**Accessories:** \"[Complete detailed description of all accessories including jewelry, bags, hats, belts, etc.]\"\n\n## Example Outputs\n\n**Example 1:**\n**Outfit:** \"Crisp white cotton button-up shirt with classic collar and rolled sleeves tucked into high-waisted medium wash blue denim jeans with straight leg fit\"\n**Accessories:** \"Delicate gold chain necklace and small gold hoop earrings\"\n\n**Example 2:**\n**Outfit:** \"Flowing floral print midi dress in coral and white pattern featuring sweetheart neckline and short puffed sleeves with A-line silhouette in lightweight fabric\"\n**Accessories:** \"Wide-brimmed natural straw hat\"\n\n**Example 3:**\n**Outfit:** \"Oversized cream cable-knit sweater with dropped shoulders and ribbed cuffs worn over black high-waisted leather mini skirt\"\n**Accessories:** \"Layered silver chain necklaces, chunky silver rings, and black leather crossbody bag with gold hardware\"\n\n## Quality Check\nBefore finalizing your extraction, ensure you have:\n- ✓ Described every visible garment in detail\n- ✓ Captured all colors and patterns accurately  \n- ✓ Noted fabric textures and finishes\n- ✓ Listed all distinctive features\n- ✓ Included every accessory worn by the model\n- ✓ Ignored background, lighting, pose, and footwear\n- ✓ Used specific, descriptive language rather than generic terms"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        4340,
        820
      ],
      "id": "0baf047a-e3c2-41ec-8d30-982c4da0fb30",
      "name": "Outfit extraction",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Select footwear for:\n\n**Outfit:** \"{{ $json.output.Outfit }}\"\n**Accessories:** \"{{ $json.output.Accessories }}\"\n\nChoose the best footwear option that complements this outfit style.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=## Your Task\nSelect footwear that complements and enhances the outfit style, regardless of the photography theme.\n\n**CRITICAL RULE: Footwear must ALWAYS match the outfit style first, before considering theme.**\n\n## Selection Hierarchy\n\n1. **First Priority:** What does the outfit require? (dress = heels/sandals, athletic = sneakers)\n2. **Second Priority:** What variations work with the theme? (beach dress = sandals over heels)\n3. **Never:** Force inappropriate footwear just to match theme\n\n## Why Outfit-First Footwear Matters\n\n- Mismatched footwear destroys outfit credibility\n- Hiking boots with a sundress looks wrong regardless of \"outdoor\" theme\n- Heels with athletic wear is inappropriate even in \"sophisticated\" settings\n- The outfit dictates the footwear possibilities\n- Good footwear choice completes the look; bad choice ruins the entire image\n\n## Footwear Selection by Garment Type\n\n### Dress-Based Selections\n\n**Midi/Maxi Dresses:**\n- Heeled sandals (strappy, block heel, wedge)\n- Wedges (espadrille, cork, platform)\n- Ankle boots (heeled, flat, Western style)\n- Ballet flats (classic, pointed toe, metallic)\n\n**Mini Dresses:**\n- Heels (stiletto, block heel, platform)\n- Ankle boots (combat, Chelsea, heeled)\n- Sneakers (for casual styles only - white leather, canvas)\n- Sandals (heeled, gladiator, strappy)\n\n**Formal Dresses:**\n- Heels (pumps, stilettos, block heel)\n- Strappy sandals (metallic, satin, leather)\n- Elegant flats (pointed toe, embellished)\n\n**Casual Sundresses:**\n- Sandals (flat, low wedge, slides)\n- Espadrilles (rope sole, canvas)\n- White sneakers (leather, canvas, minimal)\n\n### Top & Bottom Combinations\n\n**Formal/Tailored Pieces:**\n- Dress shoes (oxfords, brogues, loafers)\n- Heels (pumps, block heel, pointed toe)\n- Loafers (leather, suede, chain detail)\n- Oxford shoes (classic, platform, patent)\n\n**Jeans + Dressy Top:**\n- Loafers (penny, tassel, horse bit)\n- Ankle boots (heeled, flat, pointed)\n- Heeled sandals (block heel, wedge)\n- Ballet flats (leather, patent, metallic)\n\n**Jeans + Casual Top:**\n- Sneakers (white, canvas, retro)\n- Casual boots (combat, Western, work)\n- Sandals (flat, sporty, slides)\n\n**Shorts:**\n- Sandals (flat, wedge, gladiator)\n- Sneakers (canvas, leather, colorful)\n- Espadrilles (flat, wedge, tie-up)\n- **Never:** Heavy boots with shorts\n\n**Athletic Wear:**\n- Sports shoes (running, training, tennis)\n- Athletic sneakers (performance, lifestyle)\n- **Only athletic footwear with athletic clothing**\n\n### Special Considerations\n\n**Skirts:**\n- Match formality level\n- Formal skirts = heels, dress flats\n- Casual skirts = sneakers, sandals, boots\n\n**Vintage/Retro Outfits:**\n- Period-appropriate footwear\n- 1950s = kitten heels, saddle shoes\n- 1970s = platform sandals, boots\n- 1990s = chunky sneakers, combat boots\n\n**All-White Outfits:**\n- White footwear preferred\n- Nude/tan as secondary choice\n- Avoid dark colors that break the monochrome\n\n## Common Footwear Mistakes to AVOID\n\n❌ **Never Do These:**\n- Hiking boots with dresses/skirts\n- Athletic shoes with formal wear\n- Heavy boots with summer dresses\n- Formal heels with athletic wear\n- Winter boots with summer outfits\n- Flip-flops with formal clothing\n- Stilettos with casual shorts\n\n## Quick Reference Guide\n\n**If Outfit Includes:**\n- **Dress** → Heels, sandals, or flats (based on dress style)\n- **Jeans** → Sneakers, boots, or loafers (based on top formality)\n- **Shorts** → Sandals, sneakers, or espadrilles\n- **Athletic wear** → Athletic shoes only\n- **Formal pieces** → Dress shoes or heels only\n- **Skirts** → Match skirt's formality level\n\n## Footwear Color Guidelines\n\n**Universal Colors:**\n- **Nude/Tan:** Universally flattering, elongates legs\n- **Black:** Classic, works with most colors\n- **White:** Fresh, perfect for casual/summer looks\n- **Metallic:** Special occasions, adds glamour\n\n**Color Matching Rules:**\n- Match shoe color to outfit's dominant neutral\n- Pick up accent colors from the outfit\n- Monochrome outfits = match or contrast thoughtfully\n- Bright outfits = neutral shoes to balance\n\n## Seasonal Considerations\n\n**Summer Outfits:**\n- Open-toe shoes preferred\n- Sandals, espadrilles, canvas sneakers\n- Light colors and breathable materials\n- **No heavy boots with summer clothing**\n\n**Winter Outfits:**\n- Closed-toe shoes required\n- Boots, pumps, loafers\n- Darker colors and substantial materials\n- **No sandals with winter clothing**\n\n**Transitional Weather:**\n- Ankle boots, loafers, low boots\n- Medium weight materials\n- Versatile colors (tan, brown, navy)\n\n## Selection Process\n\n### Step 1: Analyze the Outfit\n- What's the formality level?\n- What's the dominant garment (dress, pants, skirt)?\n- What's the overall style aesthetic?\n- What season/weather does it suggest?\n\n### Step 2: Determine Appropriate Categories\n- List 3-4 footwear types that work with this outfit\n- Consider the outfit's color palette\n- Think about proportions and styling\n\n### Step 3: Make Final Selection\n- Choose the option that best completes the look\n- Consider comfort and practicality for the setting\n- Ensure the choice enhances rather than competes\n\n## Output Format\n\nonly return with one best option!\n\n**Selected Footwear:** \"[Specific shoe description with color, style, and material details]\"\n\n## Example Selections\n\n**Example 1:**\n*Outfit: Crisp white button-up + high-waisted jeans*\n**Selected Footwear:** \"Nude leather ballet flats with pointed toe\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        5800,
        860
      ],
      "id": "136ae3b6-2529-40d3-b31d-62167a4ea02a",
      "name": "Footwear",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-05-20",
        "options": {
          "temperature": 0.5
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        5740,
        1040
      ],
      "id": "389ca9d6-abfc-4dc3-a41b-22f510fd26ca",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "9yxCHdoHv3CEy9Ue",
          "name": "BR"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"Selected_Footwear\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        5960,
        1200
      ],
      "id": "5fd3a58c-05a5-4ddb-869c-1a74215184c2",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "options": {
          "prompt": "Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        5900,
        1060
      ],
      "id": "a5b87aa3-44ce-4086-825a-00e92bb49b11",
      "name": "Auto-fixing Output Parser2"
    },
    {
      "parameters": {
        "jsCode": "  function duplicateItems(items, times = 3) {\n    const duplicated = [];\n    items.forEach(item => {\n      for (let i = 0; i < times; i++) {\n        duplicated.push({\n          json: { ...item.json},\n          // binary: item.binary\n        });\n      }\n    });\n    return duplicated;\n  }\n\n  // For n8n Code node:\n  return duplicateItems(items, 3);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7100,
        860
      ],
      "id": "d1921256-b19f-4831-96f7-b230b7d44cea",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate an editorial fashion photography prompt for this outfit:\n\n**Outfit:** \"{{ $json.output.Outfit }}\"\n\n**Footwear:** \"{{ $json.output.Selected_Footwear }}\"\n\n**Accessories:** \"{{ $json.output.Accessories }}\"\n\nPlease create a sophisticated 150-200 word editorial prompt following the Fashion Flux style guidelines.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# INDIAN ETHNIC FASHION PHOTOGRAPHY SYSTEM - BRAND-ALIGNED INSTRUCTIONS\n\n## OVERVIEW\nYou are an expert fashion photography prompt generator specializing in Indian ethnic wear that combines approachable, relatable aesthetics with intelligent theme selection and environmental storytelling. Transform text descriptions of ethnic outfits into warm, aspirational fashion photography prompts suitable for modern Indian fashion brands.\n\n## CORE COMPETENCIES\n\n### FASHION KNOWLEDGE BASE\n- Comprehensive knowledge of Indian ethnic wear: sarees, kurtas, anarkalis, lehengas, salwar suits\n- Fluent in Indian fashion terminology: silhouettes, textiles (cotton, silk, chiffon), traditional embellishments\n- Recognition of Indian aesthetic elements and cultural fashion influences\n- Understanding of contemporary Indian fashion photography styles\n\n### VISUAL LANGUAGE MASTERY\n- Translate ethnic fashion concepts into relatable visual descriptions\n- Articulate natural lighting setups with subtle shadows\n- Command color theory emphasizing outfit visibility against neutral backgrounds\n- Express warmth and approachability through detailed sensory language\n\n### THEME INTELLIGENCE\n- Auto-select appropriate Indian lifestyle themes based on outfit analysis\n- Generate authentic Indian environmental contexts with architectural details\n- Create relaxed, candid compositions with natural interactions\n\n## INPUT PROCESSING PROTOCOL\n\n### EXTRACT FROM TEXT INPUT:\n**OUTFIT DETAILS:**\n- Garment type (kurta, anarkali, saree, lehenga, salwar suit)\n- Colors, patterns, and fabric textures\n- Length and traditional cuts\n- Neckline styles common in ethnic wear\n- Sleeve variations\n- Traditional design details (embroidery, prints, borders, embellishments)\n\n**FOOTWEAR & ACCESSORIES:**\n- Traditional footwear (juttis, kolhapuris, sandals)\n- Jewelry (ethnic earrings, traditional necklaces, bangles)\n- Dupattas and additional ethnic accessories\n\n## BRAND-SPECIFIC THEME SELECTION LOGIC\n\n**ANALYZE STYLING DETAILS IN PRIORITY ORDER:**\n1. **Color vibrancy & visual weight** (bright/bold vs soft/muted)\n2. **Fabric flow & movement** (structured vs flowing)\n3. **Styling elements** (casual vs dressed up)\n4. **Time of day suggestion** (morning fresh vs evening elegant)\n5. **Activity context** (static elegance vs movement-friendly)\n\n### THEME OPTIONS WITH INDIAN BACKGROUNDS:\n\n**HERITAGE HOME**\n- *Indicators:* Structured silhouettes, deeper jewel tones, heavier fabrics, traditional motifs, formal ethnic pieces\n- *Backgrounds:* Indian tiled flooring, architectural columns with arches, traditional courtyards, white/grey walls\n- *Lighting:* Natural sunlight with soft shadows, window light\n- *Mood:* Comfortable elegance, approachable sophistication\n\n**MODERN INDIAN ALLEY**\n- *Indicators:* Mid-weight fabrics, contemporary color blocks, everyday kurtas with modern cuts, casual ethnic coordinates\n- *Backgrounds:* Indian streets with premium windows, white bougainvillea, clean architectural elements\n- *Lighting:* Natural daylight, subtle environmental shadows\n- *Mood:* Urban ethnic, relatable luxury\n\n**RESORT ELEGANCE**\n- *Indicators:* Light, airy fabrics (chiffons, georgettes), pastel or bright tropical colors, relaxed silhouettes, vacation-friendly styles\n- *Backgrounds:* Resort settings with Indian elements, terracotta floors, earthy walls, manicured spaces\n- *Lighting:* Soft resort ambiance, golden hour warmth\n- *Mood:* Relaxed refinement, vacation comfort\n\n**INDOOR SOPHISTICATION**\n- *Indicators:* Evening-appropriate colors (deep oranges, maroons, navy), silk-like textures, embellished pieces, sarees\n- *Backgrounds:* Dark wood furniture, golden curtains, subtle patterned carpets, Indian interiors\n- *Lighting:* Warm interior lighting, window-filtered light\n- *Mood:* Festive warmth, traditional grace\n\n**CONTEMPORARY FUSION**\n- *Indicators:* Solid colors or geometric prints, minimal embellishments, Western-influenced cuts with ethnic elements, coord sets\n- *Backgrounds:* Clean modern spaces with Indian accents, glass doors, premium finishes\n- *Lighting:* Bright, clean lighting emphasizing outfit details\n- *Mood:* Modern Indian woman, effortless style\n\n## SHOT TYPE VARIATIONS\n\n### BRAND-PREFERRED SHOT TYPES:\n- **Full-body shot:** Shows complete ethnic outfit with natural stance\n- **Three-quarter shot:** Emphasizes outfit flow and movement\n- **Walking shot:** Natural movement showcasing fabric drape\n- **Sitting shot:** Relaxed poses on furniture or steps\n- **Environmental interaction:** Model naturally engaging with surroundings\n\n## BRAND-SPECIFIC FASHION ELEMENTS\n\n### COMPLETE STYLING VISION:\n**HAIR:** Approachable styles (open waves, ponytails, relaxed buns - never too styled)\n**MAKEUP:** Minimal but polished (natural glow, soft lip color, defined eyes)\n**EXPRESSION:** Happy, soft, and warm (genuine smiles, no poker faces)\n**BODY LANGUAGE:** Relaxed, confident, and natural movement\n\n### MODEL CHARACTERISTICS:\n- Approachable Indian faces reflecting target audience\n- Warm, relatable expressions\n- Natural, confident posture\n- Authentic interaction with environment\n\n## EDITORIAL PROMPT STRUCTURE\n\n### NATURAL PARAGRAPH FORMAT (150-200 words)\nGenerate a flowing prompt that organically integrates:\n\n**OPENING:** Shot type and lifestyle concept\n**SUBJECT:** Relatable model description with natural styling\n**GARMENTS:** Detailed ethnic outfit woven into daily life context\n**ENVIRONMENT:** Authentic Indian settings that enhance relatability\n**MOOD & MOVEMENT:** Natural gestures and candid moments\n**TECHNICAL:** Bright, natural lighting approach\n**AESTHETIC:** Contemporary Indian lifestyle references\n\n### STYLE BALANCE\n- Blend **aspirational quality** with **everyday relatability**\n- Create **premium imagery** with **approachable elements**\n- Combine **ethnic tradition** with **modern lifestyle**\n- Mix **polished presentation** with **candid moments**\n\n### POSE PHILOSOPHY\nSuggest natural activities and movements:\n- **Everyday actions** (walking through doorways, adjusting dupatta, sitting casually)\n- **Candid moments** (looking away naturally, mid-conversation gestures)\n- **Environmental engagement** (touching walls, holding railings, interacting with space)\n- **Effortless positions** that show outfit naturally\n\n## OUTPUT EXAMPLES\n\n### VARIED OPENING STRUCTURES:\n- \"Full-body shot capturing a modern Indian woman in her heritage home...\"\n- \"Three-quarter frame showcasing effortless ethnic style in a resort setting...\"\n- \"Natural walking shot through a contemporary Indian alley...\"\n- \"Candid moment of relaxed sophistication in traditional interiors...\"\n\n### NATURAL LANGUAGE FLOW:\nCreate prompts that feel like lifestyle moments rather than posed fashion shots, while maintaining professional quality and the 150-200 word count.\n\n## QUALITY STANDARDS\n\n### BRAND AUTHENTICITY\n- Ensure approachable, non-intimidating imagery\n- Maintain focus on outfit visibility against clean backgrounds\n- Create cohesive Indian lifestyle narratives\n- Develop warm, inviting mood throughout\n\n### CREATIVE GUIDELINES\n- Avoid overly editorial or high-fashion language\n- Use relatable, everyday scenarios\n- Emphasize comfort and wearability\n- Maintain cultural authenticity without stereotypes\n\n### TECHNICAL PRECISION\n- Specify natural lighting with soft shadows\n- Suggest slightly blurred backgrounds for outfit focus\n- Include Indian architectural and design elements\n- Maintain bright, clean aesthetic for product visibility\n\n## PROCESS FLOW\n1. **Analyze input** for ethnic outfit details and occasion\n2. **Select theme** based on outfit style and wearability context\n3. **Choose shot type** that naturally showcases the garment\n4. **Develop mood** with approachable styling and expressions\n5. **Craft prompt** with lifestyle narrative and natural flow\n6. **Ensure 150-200 words** while maintaining engaging, relatable narrative"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        8740,
        60
      ],
      "id": "b1754b3c-acc6-46b7-b7fc-95487e834530",
      "name": "Prompt Generator1",
      "executeOnce": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate an editorial fashion photography prompt for this outfit:\n\n**Outfit:** \"{{ $json.output.Outfit }}\"\n\n**Footwear:** \"{{ $json.output.Selected_Footwear }}\"\n\n**Accessories:** \"{{ $json.output.Accessories }}\"\n\nPlease create a sophisticated 150-200 word editorial prompt following the Fashion Flux style guidelines.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# INDIAN ETHNIC FASHION PHOTOGRAPHY SYSTEM - BRAND-ALIGNED INSTRUCTIONS\n\n## OVERVIEW\nYou are an expert fashion photography prompt generator specializing in Indian ethnic wear that combines approachable, relatable aesthetics with intelligent theme selection and environmental storytelling. Transform text descriptions of ethnic outfits into warm, aspirational fashion photography prompts suitable for modern Indian fashion brands.\n\n## CORE COMPETENCIES\n\n### FASHION KNOWLEDGE BASE\n- Comprehensive knowledge of Indian ethnic wear: sarees, kurtas, anarkalis, lehengas, salwar suits\n- Fluent in Indian fashion terminology: silhouettes, textiles (cotton, silk, chiffon), traditional embellishments\n- Recognition of Indian aesthetic elements and cultural fashion influences\n- Understanding of contemporary Indian fashion photography styles\n\n### VISUAL LANGUAGE MASTERY\n- Translate ethnic fashion concepts into relatable visual descriptions\n- Articulate natural lighting setups with subtle shadows\n- Command color theory emphasizing outfit visibility against neutral backgrounds\n- Express warmth and approachability through detailed sensory language\n\n### THEME INTELLIGENCE\n- Auto-select appropriate Indian lifestyle themes based on outfit analysis\n- Generate authentic Indian environmental contexts with architectural details\n- Create relaxed, candid compositions with natural interactions\n\n## INPUT PROCESSING PROTOCOL\n\n### EXTRACT FROM TEXT INPUT:\n**OUTFIT DETAILS:**\n- Garment type (kurta, anarkali, saree, lehenga, salwar suit)\n- Colors, patterns, and fabric textures\n- Length and traditional cuts\n- Neckline styles common in ethnic wear\n- Sleeve variations\n- Traditional design details (embroidery, prints, borders, embellishments)\n\n**FOOTWEAR & ACCESSORIES:**\n- Traditional footwear (juttis, kolhapuris, sandals)\n- Jewelry (ethnic earrings, traditional necklaces, bangles)\n- Dupattas and additional ethnic accessories\n\n## BRAND-SPECIFIC THEME SELECTION LOGIC\n\n**ANALYZE STYLING DETAILS IN PRIORITY ORDER:**\n1. **Color vibrancy & visual weight** (bright/bold vs soft/muted)\n2. **Fabric flow & movement** (structured vs flowing)\n3. **Styling elements** (casual vs dressed up)\n4. **Time of day suggestion** (morning fresh vs evening elegant)\n5. **Activity context** (static elegance vs movement-friendly)\n\n### THEME OPTIONS WITH INDIAN BACKGROUNDS:\n\n**HERITAGE HOME**\n- *Indicators:* Structured silhouettes, deeper jewel tones, heavier fabrics, traditional motifs, formal ethnic pieces\n- *Backgrounds:* Indian tiled flooring, architectural columns with arches, traditional courtyards, white/grey walls\n- *Lighting:* Natural sunlight with soft shadows, window light\n- *Mood:* Comfortable elegance, approachable sophistication\n\n**MODERN INDIAN ALLEY**\n- *Indicators:* Mid-weight fabrics, contemporary color blocks, everyday kurtas with modern cuts, casual ethnic coordinates\n- *Backgrounds:* Indian streets with premium windows, white bougainvillea, clean architectural elements\n- *Lighting:* Natural daylight, subtle environmental shadows\n- *Mood:* Urban ethnic, relatable luxury\n\n**RESORT ELEGANCE**\n- *Indicators:* Light, airy fabrics (chiffons, georgettes), pastel or bright tropical colors, relaxed silhouettes, vacation-friendly styles\n- *Backgrounds:* Resort settings with Indian elements, terracotta floors, earthy walls, manicured spaces\n- *Lighting:* Soft resort ambiance, golden hour warmth\n- *Mood:* Relaxed refinement, vacation comfort\n\n**INDOOR SOPHISTICATION**\n- *Indicators:* Evening-appropriate colors (deep oranges, maroons, navy), silk-like textures, embellished pieces, sarees\n- *Backgrounds:* Dark wood furniture, golden curtains, subtle patterned carpets, Indian interiors\n- *Lighting:* Warm interior lighting, window-filtered light\n- *Mood:* Festive warmth, traditional grace\n\n**CONTEMPORARY FUSION**\n- *Indicators:* Solid colors or geometric prints, minimal embellishments, Western-influenced cuts with ethnic elements, coord sets\n- *Backgrounds:* Clean modern spaces with Indian accents, glass doors, premium finishes\n- *Lighting:* Bright, clean lighting emphasizing outfit details\n- *Mood:* Modern Indian woman, effortless style\n\n## SHOT TYPE VARIATIONS\n\n### BRAND-PREFERRED SHOT TYPES:\n- **Full-body shot:** Shows complete ethnic outfit with natural stance\n- **Three-quarter shot:** Emphasizes outfit flow and movement\n- **Walking shot:** Natural movement showcasing fabric drape\n- **Sitting shot:** Relaxed poses on furniture or steps\n- **Environmental interaction:** Model naturally engaging with surroundings\n\n## BRAND-SPECIFIC FASHION ELEMENTS\n\n### COMPLETE STYLING VISION:\n**HAIR:** Approachable styles (open waves, ponytails, relaxed buns - never too styled)\n**MAKEUP:** Minimal but polished (natural glow, soft lip color, defined eyes)\n**EXPRESSION:** Happy, soft, and warm (genuine smiles, no poker faces)\n**BODY LANGUAGE:** Relaxed, confident, and natural movement\n\n### MODEL CHARACTERISTICS:\n- Approachable Indian faces reflecting target audience\n- Warm, relatable expressions\n- Natural, confident posture\n- Authentic interaction with environment\n\n## EDITORIAL PROMPT STRUCTURE\n\n### NATURAL PARAGRAPH FORMAT (150-200 words)\nGenerate a flowing prompt that organically integrates:\n\n**OPENING:** Shot type and lifestyle concept\n**SUBJECT:** Relatable model description with natural styling\n**GARMENTS:** Detailed ethnic outfit woven into daily life context\n**ENVIRONMENT:** Authentic Indian settings that enhance relatability\n**MOOD & MOVEMENT:** Natural gestures and candid moments\n**TECHNICAL:** Bright, natural lighting approach\n**AESTHETIC:** Contemporary Indian lifestyle references\n\n### STYLE BALANCE\n- Blend **aspirational quality** with **everyday relatability**\n- Create **premium imagery** with **approachable elements**\n- Combine **ethnic tradition** with **modern lifestyle**\n- Mix **polished presentation** with **candid moments**\n\n### POSE PHILOSOPHY\nSuggest natural activities and movements:\n- **Everyday actions** (walking through doorways, adjusting dupatta, sitting casually)\n- **Candid moments** (looking away naturally, mid-conversation gestures)\n- **Environmental engagement** (touching walls, holding railings, interacting with space)\n- **Effortless positions** that show outfit naturally\n\n## OUTPUT EXAMPLES\n\n### VARIED OPENING STRUCTURES:\n- \"Full-body shot capturing a modern Indian woman in her heritage home...\"\n- \"Three-quarter frame showcasing effortless ethnic style in a resort setting...\"\n- \"Natural walking shot through a contemporary Indian alley...\"\n- \"Candid moment of relaxed sophistication in traditional interiors...\"\n\n### NATURAL LANGUAGE FLOW:\nCreate prompts that feel like lifestyle moments rather than posed fashion shots, while maintaining professional quality and the 150-200 word count.\n\n## QUALITY STANDARDS\n\n### BRAND AUTHENTICITY\n- Ensure approachable, non-intimidating imagery\n- Maintain focus on outfit visibility against clean backgrounds\n- Create cohesive Indian lifestyle narratives\n- Develop warm, inviting mood throughout\n\n### CREATIVE GUIDELINES\n- Avoid overly editorial or high-fashion language\n- Use relatable, everyday scenarios\n- Emphasize comfort and wearability\n- Maintain cultural authenticity without stereotypes\n\n### TECHNICAL PRECISION\n- Specify natural lighting with soft shadows\n- Suggest slightly blurred backgrounds for outfit focus\n- Include Indian architectural and design elements\n- Maintain bright, clean aesthetic for product visibility\n\n## PROCESS FLOW\n1. **Analyze input** for ethnic outfit details and occasion\n2. **Select theme** based on outfit style and wearability context\n3. **Choose shot type** that naturally showcases the garment\n4. **Develop mood** with approachable styling and expressions\n5. **Craft prompt** with lifestyle narrative and natural flow\n6. **Ensure 150-200 words** while maintaining engaging, relatable narrative"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        8760,
        500
      ],
      "id": "0d6af099-d5cd-4128-bf78-089e356a43fe",
      "name": "Prompt Generator2",
      "executeOnce": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        8300,
        -420
      ],
      "id": "62540f53-7e71-4df8-be9f-3aafc62931ef",
      "name": "Limit1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        8300,
        60
      ],
      "id": "c135d6b1-5676-4b13-9258-bf6fcff2616b",
      "name": "Limit2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        8300,
        500
      ],
      "id": "3473d7e7-4874-443c-8d21-db7707f78ce0",
      "name": "Limit3"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"prompt\": \"California\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        9440,
        200
      ],
      "id": "23013756-21fa-46da-83ae-c11bdfdec272",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-05-20",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        9320,
        220
      ],
      "id": "654ec1e5-ab7e-4f57-98d8-e23cd9da815e",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "UpLQ2CLSMB2oJQnX",
          "name": "Sri"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        9720,
        40
      ],
      "id": "41bd8eba-d7a0-46f4-9d11-9a6c573b7b6d",
      "name": "Merge2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f4a4f7fd-4561-454c-93ac-f18bbe08f5df",
              "name": "Gen-col",
              "value": "={{ $json['Gen-col'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        10060,
        640
      ],
      "id": "278c2295-c26f-4f4a-9c1b-827633630c96",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "output.prompt"
            },
            {
              "fieldToAggregate": "Gen-col"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        10500,
        600
      ],
      "id": "b3879b3b-1bbd-4ba3-a231-5ecd01bfb167",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "a9ef4884-562b-4022-8a53-f50ad90fc18a",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        920,
        840
      ],
      "id": "90290d40-7078-451e-9d6b-d18c424ceb53",
      "name": "Webhook",
      "webhookId": "a9ef4884-562b-4022-8a53-f50ad90fc18a",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        7260,
        140
      ],
      "id": "bc25fe92-27c7-4a01-bde3-a40ca16201ac",
      "name": "No Operation, do nothing",
      "disabled": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": false
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        6800,
        120
      ],
      "id": "5cf20135-a6eb-4703-a1ac-2336213a3f0c",
      "name": "Merge3",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const itemCount = $input.all().length;\nreturn [{count: parseInt(itemCount) }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6480,
        80
      ],
      "id": "7faca5bf-c701-4bd9-a805-8932622a88a7",
      "name": "Code1",
      "disabled": true
    },
    {
      "parameters": {
        "url": "=https://drive.google.com/uc?export=download&id={{ $json.id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3660,
        800
      ],
      "id": "80fafe83-31c3-4ebe-9ee5-65253f73e38e",
      "name": "HTTP Request1",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        2400,
        600
      ],
      "id": "d2a1d5db-8f71-4ad3-a832-1a12644e1dfa",
      "name": "Limit",
      "alwaysOutputData": true,
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        8500,
        60
      ],
      "id": "32cc78bb-e9d0-45d8-8fd6-539045370c92",
      "name": "Wait1",
      "webhookId": "a3f7fe73-93e3-4ca3-ba4d-6cfe98136d37"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        8500,
        500
      ],
      "id": "274db573-45f6-477f-8bca-fba28c243aa8",
      "name": "Wait2",
      "webhookId": "82dcf118-77b8-4704-a487-2c6fd852b4f1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f242406c-6fd5-4913-b85b-6e2f4636246a",
              "name": "row_number",
              "value": "={{ $json.row_number }}",
              "type": "number"
            },
            {
              "id": "c641b0dd-ad8c-40e4-ab30-043d32ca4331",
              "name": "Prompt 1",
              "value": "={{ $json['Prompt 1'] }}",
              "type": "string"
            },
            {
              "id": "6bd61f42-6e5c-4519-930d-466f2aca6153",
              "name": "Gen-col",
              "value": "={{ $json['Gen-col'] }}",
              "type": "string"
            },
            {
              "id": "e10a55b6-d0c1-4225-a3ef-91c6212a83bc",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1980,
        620
      ],
      "id": "a2a860b1-5a05-462a-9859-68b1a59df4ca",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ca92f47e-0125-461f-ab33-f6579cdc3a7e",
              "name": "row_number",
              "value": "={{ $json.row_number }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5380,
        260
      ],
      "id": "e36106c8-4b4a-4ae4-ba4b-4581e5fe344f",
      "name": "Edit Fields4",
      "disabled": true
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"completed\",\n  \"processing_summary\": {\n    \"starting_row\": {{ $json.row_number }},\n    \"end_row\":{{ $json.row_number + ($json.count - 1) }},\n    \"rows_processed\": {{$json.count}},\n    \"message\": \"***Processing completed***: {{ $json.count }} rows processed starting from row number {{ $json.row_number }}, completed through row {{ $json.row_number + ($json.count - 1) }}\"\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        6980,
        120
      ],
      "id": "cee5df61-105a-4379-b781-e6c4c4823717",
      "name": "Respond to Webhook",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"message\": \"success\",\n  \"workflow_id\": \"{{ $workflow.id }}\",\n  \"workflow_name\": \"{{ $workflow.name }} | {{ $workflow.active }}  \",\n  \"level\": \"GOT {{ $json.count }} ROWS FROM SHEET\",\n  \"data\": {\n    \"No.of Rows\": \"{{ $json.count }} test\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1920,
        400
      ],
      "id": "427e7117-f98c-4bc1-81e4-4cc41c74b15f",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\nconst rownumber = $input.first().json.row_number\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: \"NO Limit\",\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Rows Fetched from sheet`,\n          data: `${items.length} Rows starting from ${rownumber} row`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        400
      ],
      "id": "f178d69d-993a-457d-b196-5c08228f2794",
      "name": "Code2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"message\": \"success\",\n  \"workflow_id\": \"{{ $workflow.id }}\",\n  \"workflow_name\": \"{{ $workflow.name }} | {{ $workflow.active }}  \",\n  \"level\": \"Workflow Started\",\n  \"data\": {\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        620
      ],
      "id": "a4049b2a-0972-4af7-b82d-0f4eb3132d5f",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "jsCode": "const itemCount = $input.all().length;\nreturn [{count: parseInt(itemCount) }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2220,
        360
      ],
      "id": "2fce2b47-4770-41f3-892f-c7396c15dcb6",
      "name": "Code3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"message\": \"success\",\n \"workflow_id\": \"{{ $workflow.id }}\",\n \"workflow_name\": \"{{ $workflow.name }} | {{ $workflow.active }}\",\n \"level\": \"{{ $json.count }} FILTERED EMPTY ROWS FOR PROCESSING\",\n \"data\":\"Empty Rows Found {{ $json.count }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2380,
        360
      ],
      "id": "cf8c245a-e3b0-4527-8ebd-ccfe4e8d2411",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3100,
        260
      ],
      "id": "262c52f8-161a-4aa5-8097-f95421717553",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: \"NO Limit\",\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Limited`,\n          data: `Limited ${items.length}`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2940,
        260
      ],
      "id": "fbde5481-bd09-4888-b48b-c50bfcc0128a",
      "name": "Code4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3120,
        2180
      ],
      "id": "546060f5-bf3d-45ae-9ab4-942ea0e2d644",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "jsCode": "// Get persistent data storage for the workflow\nconst staticData = $getWorkflowStaticData('global'); \n\n// Initialize if not already set\nstaticData.loopCount = (staticData.loopCount || 0) + 1;\n\nconst items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${staticData.loopCount} Loop error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${staticData.loopCount} Loop Started`,\n          data: `Loop_number ${staticData.loopCount}`\n        }\n      }\n    }\n  ];\n}\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2940,
        2180
      ],
      "id": "a2b2ac51-db5f-4a03-9030-971814a6dea7",
      "name": "Code5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3700,
        1660
      ],
      "id": "1cd09fed-f950-4f56-8cd7-a3a7d636c506",
      "name": "HTTP Request6"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\nconst firstItemHasErrorCode = $input.first().json?.error?.code !== undefined;\n\nif (isEmpty || hasError || firstItemHasErrorCode) {\n  return [\n    {\n      json: {\n        stopExecution: true,\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Image extraction error`,\n          data: {\n            error_code: $input.first().json?.error?.code || \"Unknown\"\n          }\n        }\n      }\n    }\n  ];\n}\n\nreturn [\n  {\n    json: {\n      stopExecution: false,\n      response: {\n        message: \"success\",\n        workflow_id: $workflow.id,\n        workflow_name: `${$workflow.name} | ${$workflow.active}`,\n        level: `${items.length} Image extraction started`,\n        data: `${items.length} Image sending to model`\n      }\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        1600
      ],
      "id": "f05e660a-33ab-4719-b81b-4c98016e2643",
      "name": "Code6"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3460,
        800
      ],
      "id": "96161332-4ff6-4ffc-9292-5079eb51c07c",
      "name": "Merge4"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        4060,
        820
      ],
      "id": "fb64ae46-a655-4db8-bcdd-1d83a33c4dbd",
      "name": "Merge5"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        4980,
        840
      ],
      "id": "cd180b22-1389-434e-94e1-113056ec7989",
      "name": "Merge6"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} image extraction error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  const outfit = $input.first().json.output?.Outfit || \"\";\n  const accessories = $input.first().json.output?.Accessories || \"\";\n\n  // Check if the outfit matches a fallback/invalid response\n  const fallbackRegex = /unable to view images|please provide a description of the outfit/i;\n\n  if (fallbackRegex.test(outfit)) {\n    return [\n      {\n        json: {\n          response: {\n            message: \"error\",\n            workflow_id: $workflow.id,\n            workflow_name: `${$workflow.name} | ${$workflow.active}`,\n            level: \"Outfit extraction failed — fallback text received\",\n            data: {\n              Outfit: outfit\n            }\n          }\n        }\n      }\n    ];\n  }\n\n  // All good, return success\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Image Extraction Done`,\n          data: {\n            Outfit: outfit,\n            Accessories: accessories\n          }\n        }\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4600,
        1480
      ],
      "id": "e836252b-db60-4cbd-a58a-cd7796890e6c",
      "name": "Code7"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        6520,
        880
      ],
      "id": "c71d20b8-68bd-4025-ad26-4ff89344c8d3",
      "name": "Merge7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6380,
        980
      ],
      "id": "4655b10e-cfc3-40cc-aeaf-e80cd6e9f5e5",
      "name": "HTTP Request8"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Footwear extraction error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  const footwear = $input.first().json.output.Selected_Footwear;\n  \n\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Footwear Extraction Done`,\n          data: {\n            Footwear: footwear\n          \n          }\n        }\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6180,
        980
      ],
      "id": "643597b4-dae5-4b4b-8a66-8f8fdc87bd08",
      "name": "Code8"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        5620,
        860
      ],
      "id": "38ed3e8d-8470-40c2-93cd-dd2312465c25",
      "name": "Merge8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5440,
        1000
      ],
      "id": "d68d8ac7-33c1-4f6c-9bcf-301a5800af70",
      "name": "HTTP Request9"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Footwear selection error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Footwear selection started`,\n          data: `${items.length} Outfit details sending to model`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5280,
        1000
      ],
      "id": "f7283748-77d3-446a-b2ab-d5d12c3a731e",
      "name": "Code9"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7360,
        1060
      ],
      "id": "2cc384f8-0274-4eb7-841d-d03ef85e9617",
      "name": "HTTP Request10"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: \"Dulipicated error\",\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `Duplicated ${items.length}`,\n          data: `Dulipicated ${items.length}`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7220,
        1060
      ],
      "id": "309066c4-8183-4b2e-88a2-414a12caa799",
      "name": "Code10"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        8600,
        -660
      ],
      "id": "811c5879-1fa1-4e83-ad3e-712c766c6136",
      "name": "HTTP Request11"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `Prompt Gen 1 error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `1 Prompt Gen Started`,\n          data: `sending outfit+footwear to prompt1 Gen`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8420,
        -660
      ],
      "id": "a03b3dfc-4197-40d8-8a9e-2aadf81f5c6b",
      "name": "Code11"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        9140,
        -640
      ],
      "id": "9fbf6f83-13bf-49a2-9a3c-5b311e1d82af",
      "name": "HTTP Request12"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\nconst prompt1output = $input.first().json.output.prompt;\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `Prompt Gen 1 error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `1 Prompt Gen Done`,\n          data: prompt1output\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8980,
        -640
      ],
      "id": "39924aa7-8608-43f2-ab2f-2c6f8b69fe51",
      "name": "Code12"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        7520,
        880
      ],
      "id": "afd22e33-c044-44cc-a7f1-3e7db0dda909",
      "name": "Merge9"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        8600,
        -160
      ],
      "id": "2bf4963e-5673-46a4-a169-47186448e26e",
      "name": "HTTP Request13"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `Prompt Gen 2 error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `2 Prompt Gen Started`,\n          data: `sending outfit+footwear to prompt2 Gen`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8420,
        -160
      ],
      "id": "11717f2f-965a-4be6-95b4-a56fe107dbf6",
      "name": "Code13"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        9120,
        -140
      ],
      "id": "00c3b765-3a9c-4490-bd0a-ca0a85d1a57d",
      "name": "HTTP Request14"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\nconst prompt2output = $input.first().json.output.prompt;\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `Prompt Gen 2 error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `2 Prompt Gen Done`,\n          data: prompt2output\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8960,
        -140
      ],
      "id": "1326c3bf-4fca-4177-89e4-16a43a328cb5",
      "name": "Code14"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        8580,
        320
      ],
      "id": "ab0de2bb-522d-4369-a1b1-7de874a912d1",
      "name": "HTTP Request15"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `Prompt Gen 3 error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `3 Prompt Gen Started`,\n          data: `sending outfit+footwear to prompt 3 Gen`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8420,
        320
      ],
      "id": "affbde56-797a-42fc-a150-6bb5be30eff0",
      "name": "Code15"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        9140,
        320
      ],
      "id": "c290b9e3-ff52-43ba-a4c5-cff4b5275b6f",
      "name": "HTTP Request16"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\nconst prompt3output = $input.first().json.output.prompt;\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `Prompt Gen 3 error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `3 Prompt Gen Done`,\n          data: prompt3output\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8980,
        320
      ],
      "id": "2ba8099b-b4f4-4c8d-a1ea-69f28260a74b",
      "name": "Code16"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Logging to sheets error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Logging to sheets`,\n          data: `${items.length} rows adding to sheets`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        10660,
        780
      ],
      "id": "810eb7c5-0372-4e68-af70-d92c922311b6",
      "name": "Code17"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        10980,
        620
      ],
      "id": "03dac10c-527d-4531-88b4-be6e18b1aba4",
      "name": "Merge10"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        11460,
        820
      ],
      "id": "e5e001be-5808-4e97-8058-ea306d5e22ad",
      "name": "HTTP Request18"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst isEmpty = items.length === 0 || (items.length === 1 && Object.keys(items[0].json).length === 0);\nconst hasError = items.some(item => item.error);\nconst column = $input.first().json['Gen-col'];\n\nif (isEmpty || hasError) {\n  return [\n    {\n      json: {\n        response: {\n          message: \"error\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${items.length} Logging to sheets error`,\n          data: {}\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        response: {\n          message: \"success\",\n          workflow_id: $workflow.id,\n          workflow_name: `${$workflow.name} | ${$workflow.active}`,\n          level: `${column} prompts added`,\n          data: `${column} prompts added to sheets`\n        }\n      }\n    }\n  ];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        11280,
        820
      ],
      "id": "9ee19027-fad9-4517-abe3-5ad355fbe29f",
      "name": "Code18"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        11660,
        620
      ],
      "id": "fa3c3333-75b0-473f-8f8a-0bd16d057e91",
      "name": "Merge11"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        10840,
        780
      ],
      "id": "1fb1c221-79f2-4dc7-a2ec-7813a4a82747",
      "name": "HTTP Request19"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        8580,
        860
      ],
      "id": "a2a9b0ed-4199-442e-81de-9031dd011fdd",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "UpLQ2CLSMB2oJQnX",
          "name": "Sri"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a5908c3-8bb3-4ce4-9da6-dc5cbbfd0ad9",
              "leftValue": "={{ $json.stopExecution }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3700,
        1520
      ],
      "id": "26a1890f-fcf7-48db-8a98-176deef2544c",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "throw new Error(\"download image failed\");\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4100,
        1600
      ],
      "id": "c6dc8e97-2f40-4a55-bf13-9902292f4e1f",
      "name": "Code19"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3920,
        1600
      ],
      "id": "0a6f3d2e-59f7-438d-8a4b-3ddc236012ac",
      "name": "Merge12"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a5908c3-8bb3-4ce4-9da6-dc5cbbfd0ad9",
              "leftValue": "={{ $json.response.message }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3120,
        2000
      ],
      "id": "85a9b603-632f-4087-83e9-8b20a62dfb99",
      "name": "If2"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3320,
        2160
      ],
      "id": "6c2a02ad-49ae-4d12-89e6-61ff93aace3b",
      "name": "Merge13"
    },
    {
      "parameters": {
        "jsCode": "throw new Error(\"loop failed\");\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3480,
        2160
      ],
      "id": "1973fd14-5f5e-4417-8f86-0b4a300daae8",
      "name": "Code20"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2620,
        600
      ],
      "id": "966e04da-e93b-4825-b5b3-ac2f32384bef",
      "name": "FAIL",
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4200,
        820
      ],
      "id": "339a9d98-770e-4a4d-a419-900c7239e8ed",
      "name": "FAIL1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.97:8001/log",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($input.all()[0].json.response, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4800,
        1520
      ],
      "id": "b290bf42-2c99-41ec-b2ab-10e38ab287fb",
      "name": "HTTP Request17"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a5908c3-8bb3-4ce4-9da6-dc5cbbfd0ad9",
              "leftValue": "={{ $json.response.message }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4800,
        1340
      ],
      "id": "266916f2-fb4c-42dd-9cd7-0b75059b5f87",
      "name": "If4"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        5000,
        1500
      ],
      "id": "679bd390-c724-43d3-bffe-7fbda84a4bb9",
      "name": "Merge15"
    },
    {
      "parameters": {
        "jsCode": "throw new Error(\"loop failed\");\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5160,
        1500
      ],
      "id": "8ac275a9-9c95-4268-bd74-7524a9a06405",
      "name": "Code22"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Gets image from sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gets image from sheet": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adds Prompt to sheets": {
      "main": [
        [
          {
            "node": "Code18",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompt Generator": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger": {
      "main": [
        [
          {
            "node": "Gets image from sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Prompt Generator1",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Prompt Generator2",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Prompt Generator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge8",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Outfit extraction",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Outfit extraction",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Auto-fixing Output Parser2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Outfit extraction": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Footwear": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Footwear",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Footwear",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "Prompt Generator",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit2": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit3": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Prompt Generator1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          },
          {
            "node": "Code14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompt Generator2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 2
          },
          {
            "node": "Code16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code17",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Gets image from sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          },
          {
            "node": "FAIL",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Prompt Generator1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Prompt Generator2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          },
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "Merge13",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request6": {
      "main": [
        [
          {
            "node": "Merge12",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "FAIL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Merge14",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request17",
            "type": "main",
            "index": 0
          },
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge7": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "HTTP Request8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request8": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge8": {
      "main": [
        [
          {
            "node": "Footwear",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "HTTP Request9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request9": {
      "main": [
        [
          {
            "node": "Merge8",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "HTTP Request10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "HTTP Request11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "HTTP Request12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request10": {
      "main": [
        [
          {
            "node": "Merge9",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge9": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Limit2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Limit3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code13": {
      "main": [
        [
          {
            "node": "HTTP Request13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code14": {
      "main": [
        [
          {
            "node": "HTTP Request14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code15": {
      "main": [
        [
          {
            "node": "HTTP Request15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code16": {
      "main": [
        [
          {
            "node": "HTTP Request16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code17": {
      "main": [
        [
          {
            "node": "HTTP Request19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge10": {
      "main": [
        [
          {
            "node": "Adds Prompt to sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code18": {
      "main": [
        [
          {
            "node": "HTTP Request18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request18": {
      "main": [
        [
          {
            "node": "Merge11",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge11": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request19": {
      "main": [
        [
          {
            "node": "Merge10",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Prompt Generator2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Prompt Generator1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Prompt Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Merge12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge12": {
      "main": [
        [
          {
            "node": "Code19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code19": {
      "main": [
        []
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge13": {
      "main": [
        [
          {
            "node": "Code20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FAIL": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FAIL1": {
      "main": [
        [
          {
            "node": "Outfit extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request17": {
      "main": [
        [
          {
            "node": "Merge15",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge15": {
      "main": [
        [
          {
            "node": "Code22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5b82ce69-7527-4a72-bc00-9678f7129c79",
  "meta": {
    "instanceId": "ca033a4d92476214a7b66cfdbe053fca39109d5560a0b66321aa8a888d37e02d"
  },
  "id": "4luV6lFHvhSlsiO4",
  "tags": []
}